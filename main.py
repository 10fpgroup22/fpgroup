import re

from random import choice
from utils import *


@tg.on_message(filters.chat(group_id) & (filters.new_chat_members | filters.left_chat_member), group=-1)
async def admin_group_handler(_, msg):
    global admins
    admins = [mbr.user.id async for mbr in tg.get_chat_members(msg.chat.id) if not mbr.user.is_bot]
    update_status(admins)


@tg.on_message(filters.service & ~filters.private & ~filters.chat("ACL_esports"), group=-1)
async def group_handler(_, msg):
    try:
        await msg.delete()
    except err.RPCError as rpc:
        print(f"<{rpc}>")


@tg.on_message(filters.chat("acl_chat") & filters.new_chat_members)
async def new_chat_member(_, msg):
    welcome = await tg.send_message(
        msg.chat.id,
        f"–í—ñ–¥–¥–∞–π–º–æ –≤—ñ—Ç–∞–Ω–Ω—è –Ω–æ–≤–æ–º—É —É—á–∞—Å–Ω–∏–∫—É –Ω–∞—à–æ—ó –≥—Ä—É–ø–∏ - " + msg.from_user.mention(msg.from_user.first_name)
    )
    minilib.run(run_func, welcome.delete)
    try:
        await tg.send_message(
            msg.from_user.id,
            f"–í—ñ—Ç–∞—é —Ç–µ–±–µ –≤ –Ω–∞—à—ñ–π –≥—Ä—É–ø—ñ, {msg.from_user.first_name}!\nüëá–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ –ü—Ä–∞–≤–∏–ª–∞–º–∏ –≥—Ä—É–ø–∏üëá",
            reply_markup=types.InlineKeyboardMarkup(markups["rules"][1])
        )
    except err.RPCError as rpc:
        print(f"<{rpc}>")


@tg.on_message(filters.private & filters.command('start'))
async def start_private(_, msg):
    await tg.send_photo(msg.chat.id, **reply["menu"])


@tg.on_message(filters.command(['all', f'all@{me.username}']) & filters.group)
async def all_group(_, msg: types.Message):
    if msg.from_user:
        member = await msg.chat.get_member(msg.from_user.id)
    elif msg.sender_chat:
        member = True

    if (msg.from_user and msg.from_user.id in admins) \
        or (member and getattr(member, 'status', enums.ChatMemberStatus.ADMINISTRATOR) in [enums.ChatMemberStatus.OWNER, enums.ChatMemberStatus.ADMINISTRATOR]):
        chat = Chat.from_telegram(msg.chat.id).get_tags()
        await tg.send_message(
            msg.chat.id,
            "–ë—Ä–∞—Ç–µ, —è —Ç–µ–±–µ –ø—Ä–∏–∑–∏–≤–∞—é\n" +
            "".join([m.user.mention(getattr(emoji, choice(emojis), 'ü´•'))
                     async for m in msg.chat.get_members() if m.user.id not in chat and not m.user.is_bot])
        )

    try:
        await msg.delete()
    except err.RPCError as rpc:
        print(f"<{rpc}>")


@tg.on_message(filters.command(['leave', f'leave@{me.username}']) & filters.group)
async def leave_tag_all(_, msg):
    try:
        user = User.from_telegram(msg.from_user.id)
        if user.left_chat_tag(msg.chat.id):
            text = "–¢–µ–ø–µ—Ä —è –Ω–µ –≤—ñ–¥–º—ñ—á—É —Ç–µ–±–µ –≤ —Ü—ñ–π –≥—Ä—É–ø—ñ."
        else:
            text = "–Ø –≤–∂–µ —ñ —Ç–∞–∫ –Ω–µ –≤—ñ–¥–º—ñ—á–∞—é —Ç–µ–±–µ."
    except err.RPCError as rpc:
        if msg.sender_chat:
            text = "–û—Å–∫—ñ–ª—å–∫–∏ —Ç–∏ —î --–∞–Ω–æ–Ω—ñ–º–Ω–∏–º-- –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —è –Ω–µ –º–æ–∂—É –º–µ–Ω–µ –≤—ñ–¥–º—ñ—Ç–∏—Ç–∏."
        else:
            text = "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ"
            print(f"<{rpc}>")

    minilib.run(run_func, (await msg.reply(text)).delete, msg.delete)


@tg.on_message(filters.command(['add', f'add@{me.username}']) & filters.group)
async def add_tag_all(_, msg):
    try:
        user = User.from_telegram_id(msg.from_user.id)
        if user.add_chat_tag(msg.chat.id):
            text = "–í—ñ–¥—Ç–µ–ø–µ—Ä —è –±—É–¥—É –≤—ñ–¥–º—ñ—á–∞—Ç–∏ —Ç–µ–±–µ –≤ –≥—Ä—É–ø—ñ."
        else:
            text = "–Ø —Ç–∞–∫ —Å–∞–º–æ –≤—ñ–¥–º—ñ—á–∞—é —Ç–µ–±–µ –≤ –≥—Ä—É–ø—ñ, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–µ —Å–ø–∞–º—É–π."
    except err.RPCError as rpc:
        if msg.sender_chat:
            text = "–Ø –Ω–µ –º–æ–∂—É –≤—ñ–¥–º—ñ—Ç–∏—Ç–∏ —Ç–µ–±–µ –≤ –≥—Ä—É–ø—ñ, –æ—Å–∫—ñ–ª—å–∫–∏ —Ç–∏ - –∞–Ω–æ–Ω—ñ–º–Ω–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"
        else:
            text = "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ"
            print(f"<{rpc}>")

    minilib.run(run_func, (await msg.reply(text)).delete, msg.delete)


@tg.on_callback_query()
async def callback_query(_, qry):
    photo, caption, markup = photos.get(qry.data, photos["menu"]), captions.get(qry.data, ""), markups.get(qry.data, [])
    msg, user = qry.message, qry.from_user

    if str(msg.chat.id) in chats:
        del chats[str(msg.chat.id)]

    if qry.data == "tournir":
        verified = [False, False]

        for x, chat in enumerate(["acl_chat", "ACL_esports"]):
            try:
                verified[x] = (await tg.get_chat_member(chat, user.id)).status not in [enums.ChatMemberStatus.LEFT, enums.ChatMemberStatus.BANNED]
            except err.RPCError as rpc:
                print(f"<{rpc}>")

        if all(verified):
            url = settings.get("–¢—É—Ä–Ω–∏—Ä", "–°—Å—ã–ª–∫–∞")
            if url:
                markup = [
                    [types.InlineKeyboardButton("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", url=url)],
                    [types.InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞", url="https://telegra.ph/Pravila-turnira-01-03")]
                ]
            else:
                caption = captions["no_tournir"]
        else:
            caption = captions["subscribe"]
            markup = list(filter(bool, map(lambda x: (None if x[1] else markups["subscribe"][x[0]]), enumerate(verified))))
    elif qry.data == "social":
        markup = [
            [types.InlineKeyboardButton(txt, url=url)]
            for txt, url in settings.iter_group("–°–æ—Ü.—Å–µ—Ç–∏")
        ]

        markup.append([types.InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data="info")])

    if qry.data in ["tournir", "rules"]:
        markup.append([types.InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data="menu")])

    if bool(markup) and isinstance(markup, list):
        markup = types.InlineKeyboardMarkup(markup)

    await edit_photo(
        msg, photo, caption,
        reply_markup=(markup if bool(markup) else None)
    )


if __name__ == '__main__':
    tg.run(start())
